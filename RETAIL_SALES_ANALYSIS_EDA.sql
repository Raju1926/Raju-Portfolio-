-- Find the Total Sales
SELECT
SUM(sales_amount) AS Total_sales  
FROM gold_fact_sales ;
-- Find how many items are sold
SELECT
SUM(quantity) AS Total_quantity  
FROM gold_fact_sales ;
-- find average selling price 
SELECT
AVG(price) AS average_sale_price  
FROM gold_fact_sales ;
-- find the total number of orders 
SELECT
COUNT(order_number) AS Total_orders  
FROM gold_fact_sales ;
-- find the total number of products
SELECT
COUNT(product_key) AS Total_products 
FROM gold_dim_products ;

-- find the total number of customers
 SELECT
COUNT(customer_key) AS Total_customers 
FROM gold_dim_customers ;
-- find the total number of customers that has placed an order
SELECT
 COUNT(DISTINCT customer_key) AS Total_products 
FROM gold_fact_sales ;


-- Generate a report that shows all key metrics of the buasiness 
SELECT 'Total_Sales' as measure_name, SUM(sales_amount) as measure_value
FROM gold_fact_sales
UNION ALL 
SELECT 'Total_quantity' as measure_name, SUM(quantity) as measure_value
FROM gold_fact_sales
UNION ALL
SELECT
'average_price' ,AVG(price)   
FROM gold_fact_sales 
UNION ALL
SELECT
'Total_orders' ,COUNT(order_number)    
FROM gold_fact_sales 
UNION ALL 
SELECT
'Total_products', COUNT(product_key)  
FROM gold_dim_products
UNION ALL
SELECT
'Total_customers', COUNT(customer_key) 
FROM gold_dim_customers;


-- Find total customers by countries

SELECT country,
COUNT(customer_key) AS Total_customers
FROM gold_dim_customers
GROUP BY country
ORDER BY Total_customers DESC;

-- Find total customers by gender

SELECT gender,
COUNT(customer_key) AS Total_by_customers
FROM gold_dim_customers
GROUP BY gender
ORDER BY Total_by_customers DESC;

-- Find total products by category


SELECT category,
COUNT(product_key) AS Total_products
FROM gold_dim_products
GROUP BY category
ORDER BY Total_products DESC;

-- what is the average costs in each category?

SELECT category,
AVG(cost) AS avg_costs
FROM gold_dim_products
GROUP BY category
ORDER BY avg_costs DESC;

-- what is total revenue generated for each customer

SELECT c.customer_key,
       c.first_name,
       c.last_name,
SUM(s.sales_amount) AS Total_revenue
FROM gold_fact_sales s
LEFT JOIN gold_dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.customer_key,
         c.first_name,
         c.last_name
ORDER BY Total_revenue DESC;

-- Find total revenue is generated by each category

SELECT gd.category,
SUM(gf.sales_amount) AS Total_revenue
FROM gold_fact_sales gf
LEFT JOIN gold_dim_products gd
ON gd.product_key = gf.product_key
GROUP BY gd.category
ORDER BY Total_revenue DESC;

-- what is the distribution of sold items across countries

 SELECT c.country,
SUM(s.quantity) AS Total_sold_items
FROM gold_fact_sales s
LEFT JOIN gold_dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.country
ORDER BY Total_sold_items DESC;

-- which 5 products generate the highest revenue ?

SELECT 
p.product_name,
SUM(s.sales_amount) AS Total_revenue
FROM gold_fact_sales s
LEFT JOIN gold_dim_products p 
ON S.product_key = p.product_key
GROUP BY P.product_name
ORDER BY Total_revenue DESC
LIMIT 5 ;


-- what are the 5 worst performing product in terms of sales ?

SELECT 
p.product_name,
SUM(s.sales_amount) AS Total_revenue
FROM gold_fact_sales s
LEFT JOIN gold_dim_products p 
ON S.product_key = p.product_key
GROUP BY P.product_name
ORDER BY Total_revenue ASC
LIMIT 5 ;

SELECT 
p.subcategory,
SUM(s.sales_amount) AS Total_revenue
FROM gold_fact_sales s
LEFT JOIN gold_dim_products p 
ON S.product_key = p.product_key
GROUP BY P.subcategory
ORDER BY Total_revenue DESC
LIMIT 5 ;


SELECT*
FROM (SELECT 
p.product_name,
SUM(s.sales_amount) AS Total_revenue ,
ROW_NUMBER() OVER( ORDER BY SUM(s.sales_amount) DESC ) AS rank_products 
FROM gold_fact_sales s
LEFT JOIN gold_dim_products p 
ON S.product_key = p.product_key
GROUP BY p.product_name) t
WHERE rank_products <= 5

;


-- find the customers who have generated the highest revenue

SELECT c.customer_key,
       c.first_name,
       c.last_name,
SUM(s.sales_amount) AS Total_revenue
FROM gold_fact_sales s
LEFT JOIN gold_dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.customer_key,
         c.first_name,
         c.last_name
ORDER BY Total_revenue DESC
LIMIT 10;

-- the 3 customers with the fewest order placed 
SELECT c.customer_key,
       c.first_name,
       c.last_name,
COUNT(DISTINCT s.order_number) AS Total_orders 
FROM gold_fact_sales s
LEFT JOIN gold_dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.customer_key,
         c.first_name,
         c.last_name
ORDER BY Total_orders ASC
LIMIT 3 ;

